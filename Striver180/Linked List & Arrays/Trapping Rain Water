class Solution {
    public int trap(int[] height) {
        
        
        int n = height.length;
        int[] left = new int[n];
        int[] right = new int[n];
        
        left[0] = height[0];
        for(int i=1;i<n;i++){
            left[i] = Math.max(left[i-1],height[i]);
        }
        right[n-1] = height[n-1];
         for(int i=n-2;i>=0;i--){
            right[i] = Math.max(right[i+1],height[i]);
        }
        
        int res = 0;
        for(int i=0;i<n;i++){
            res += (Math.min(left[i],right[i]) - height[i]);
        }
        return res;
        
    }
}

TC : O(N)
SC : O(N)


Using Constant Space

 public static int trap(int[] heights)
    {
        // maintain two pointers left and right, pointing to the leftmost and
        // rightmost index of the input array
        int left = 0, right = heights.length - 1, water = 0;
 
        int maxLeft = heights[left];
        int maxRight = heights[right];
 
        while (left < right)
        {
            if (heights[left] <= heights[right])
            {
                left++;
                maxLeft = Integer.max(maxLeft, heights[left]);
                water += (maxLeft - heights[left]);
            }
            else {
                right--;
                maxRight = Integer.max(maxRight, heights[right]);
                water += (maxRight - heights[right]);
            }
        }
 
        return water;
    }
    
    TC : O(N)
    SC : O(1)
    
    










