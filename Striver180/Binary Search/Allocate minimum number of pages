// { Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		
		int t=sc.nextInt();
		
		while(t-->0)
		{
		    int n=sc.nextInt();
		    int a[]=new int[n];
		    
		    for(int i=0;i<n;i++)
		    {
		        a[i]=sc.nextInt();
		    }
		    int m=sc.nextInt();
		    Solution ob = new Solution();
		    System.out.println(ob.findPages(a,n,m));
		}
	}
}// } Driver Code Ends


//User function Template for Java

class Solution 
{
    
    public static int maxOf(int[] arr){
        
       int max = 0;
       
       for(int i=0;i<arr.length-1;i++){
           if(arr[i] > arr[i+1]){
               max = arr[i];
               i++;
           }else{
               max = arr[i+1];
           }
       }
        
        return max;
        
    }
    
     public static int sumOf(int[] arr){
        int sum = 0;
        for(int val : arr){
             sum+=val;
        }
        return sum;
        
    }
    
    public static boolean isPossible(int[] arr,int mid,int k){
       int cnt = 1;
        int sum = 0;
        for(int val: arr){
            if(sum+val <= mid){
                sum+=val;
            }else{
                cnt++;
                sum = val;
            }
        }
        return cnt <= k;
        
    }
    
    
    //Function to find minimum number of pages.
    public static int findPages(int[]A,int N,int M)
    {
        
       int min = maxOf(A);
       int max = sumOf(A);
       int res = 0;
       
       
     if(M == 1){
         return max;
     }
       while(min <= max){
             
    
           int mid = (min+max)/2;
           if(isPossible(A,mid,M)){
               res = mid;
               max = mid-1;
           }else{
               min = mid+1;
           }
           
       }
       
       return res;
       
       
    }
};


TC :  O(nlogN)





