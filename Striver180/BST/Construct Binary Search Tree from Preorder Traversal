/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int nodeIndex;
    public TreeNode bstFromPreorder(int[] preorder) {
        
        // return helper(preorder,0,preorder.length-1);
        if(preorder == null) {
            return null;
        }
       nodeIndex = 0;
        return bstHelper(preorder,Integer.MIN_VALUE,Integer.MAX_VALUE);
        
    }
     public TreeNode bstHelper(int[] preorder, int start, int end) {
        if(nodeIndex == preorder.length || preorder[nodeIndex]<start || preorder[nodeIndex]>end) {
            return null;
        }
        int val = preorder[nodeIndex++];
        TreeNode node = new TreeNode(val);
        node.left = bstHelper(preorder, start, val);
        node.right = bstHelper(preorder, val, end);
        return node;   
    }   
    
    
    
    // below is O(n2)
    
//       private TreeNode helper(int[] preorder, int start, int end) {
//         if(start > end) return null;
        
//         TreeNode node = new TreeNode(preorder[start]);
//         int i;
//         for(i=start;i<=end;i++) {
//         if(preorder[i] > node.val)
//             break;
//         }
        
//         node.left = helper(preorder, start+1, i-1);
//         node.right = helper(preorder, i, end);
//         return node;
        
        
//     }
}
