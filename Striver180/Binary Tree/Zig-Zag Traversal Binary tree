/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        Queue<TreeNode> q = new LinkedList<>();
        List<List<Integer>> list = new ArrayList<>();
        
        if(root == null){
            return list;
        }
        
        
        q.offer(root);
        boolean flag = true;  // if flag = 0  then L -> R
        
        while(!q.isEmpty()){
            int levelNum = q.size();
            ArrayList<Integer> subList = new ArrayList<>();
            for(int i=0;i<levelNum;i++){
                
                if(q.peek().left != null){
                    q.offer(q.peek().left);
                }
                if(q.peek().right != null){
                    q.offer(q.peek().right);
                }
                
                if(flag == true){
                    subList.add(q.poll().val);
                }else{
                    subList.add(0,q.poll().val); // if flag is false that's 1 then R -> L
                }
            }
            flag = !flag;
            list.add(subList);
        }
        
        return list;
        
    }
}

TC : O(N)
SC : O(N)

