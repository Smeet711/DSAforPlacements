// { Driver Code Starts
import java.util.*;

class FindMinCost
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			int arr[][] = new int[n][m];
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++ )
				{
					arr[i][j] = sc.nextInt();
				}
			}
			System.out.println(new Solution().maxArea(arr, n, m));
		t--;
		}
	}
}// } Driver Code Ends


/*Complete the function given below*/
class Solution {
    public int maxArea(int M[][], int n, int m) {
       
       int currRow[] = M[0];
       int x = currRow.length;
       int maxAns = maxHistogram(currRow,x);
       
       for(int i=1;i<M.length;i++){
           for(int j=0;j<M[0].length;j++){
               if(M[i][j] == 1){
                   currRow[j] += 1;
               }else{
                   currRow[j] = 0;
               }
           }
           int currAns = maxHistogram(currRow,x);
           maxAns = Math.max(maxAns,currAns);
       }
       return maxAns;
    }
    // previous smaller on Left
     static int[] prevSmaller(int arr[]){
       Stack<Integer> st = new Stack<>();
       int ans[] = new int[arr.length];
       ans[0] = -1;
       for(int i=0;i<arr.length;i++)
       {
           while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
           st.pop();
           }
       ans[i]=st.isEmpty()?-1:st.peek();
       st.push(i);
       }
       return ans;
   }
    
    
    //  next smaller on right
     static int[] nextSmaller(int arr[]){
       Stack<Integer> st = new Stack<>();
       int ans[] = new int[arr.length];
       ans[arr.length-1] = arr.length;
       st.push(arr.length-1);
       for(int i=arr.length-1;i>=0;i--){
           while(!st.isEmpty() && arr[st.peek()]>=arr[i]){ 
               st.pop();
           }
           ans[i] = st.isEmpty()?arr.length:st.peek();
           st.push(i);
       }
       return ans;
   }
    // get max area from histogram 
      public static int maxHistogram(int hist[], int n) {
       // your code here
       int prev[] = prevSmaller(hist);
       int next[] = nextSmaller(hist);
       int max = 0;
       for(int i=0;i<n;i++){
       max = Math.max(max,(next[i]-prev[i]-1)*hist[i]);
       }
       return max;
   }
}
